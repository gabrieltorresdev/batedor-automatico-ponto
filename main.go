package main

import (
	"fmt"
	"os"
	"os/signal"
	"path/filepath"
	"syscall"

	"github.com/gabrieltorresdev/batedor-automatico-ponto/src/auth"
	"github.com/gabrieltorresdev/batedor-automatico-ponto/src/clockin"
	"github.com/gabrieltorresdev/batedor-automatico-ponto/src/ui"
	"github.com/joho/godotenv"
	"github.com/manifoldco/promptui"
)

func obterDiretorioConfig() (string, error) {
	homeDir, err := os.UserHomeDir()
	if err != nil {
		return "", fmt.Errorf("erro ao obter diret√≥rio home: %v", err)
	}

	configDir := filepath.Join(homeDir, ".batedorponto")
	if err := os.MkdirAll(configDir, 0700); err != nil {
		return "", fmt.Errorf("erro ao criar diret√≥rio de configura√ß√£o: %v", err)
	}

	return configDir, nil
}

func carregarCredenciais() (auth.Credentials, bool, error) {
	configDir, err := obterDiretorioConfig()
	if err != nil {
		return auth.Credentials{}, false, err
	}

	envFile := filepath.Join(configDir, ".env")
	if err := godotenv.Load(envFile); err == nil {
		username := os.Getenv("USERNAME_PONTO")
		password := os.Getenv("PASSWORD_PONTO")

		if username != "" && password != "" {
			return auth.Credentials{
				Username: username,
				Password: password,
			}, false, nil
		}
	}

	fmt.Println("\nüìù Por favor, insira suas credenciais:")

	usernamePrompt := promptui.Prompt{
		Label: "üë§ Usu√°rio",
		Validate: func(input string) error {
			if len(input) < 3 {
				return fmt.Errorf("usu√°rio deve ter pelo menos 3 caracteres")
			}
			return nil
		},
	}

	username, err := usernamePrompt.Run()
	if err != nil {
		return auth.Credentials{}, false, fmt.Errorf("erro ao ler usu√°rio: %v", err)
	}

	passwordPrompt := promptui.Prompt{
		Label: "üîí Senha",
		Mask:  '*',
		Validate: func(input string) error {
			if len(input) < 4 {
				return fmt.Errorf("senha deve ter pelo menos 4 caracteres")
			}
			return nil
		},
	}

	password, err := passwordPrompt.Run()
	if err != nil {
		return auth.Credentials{}, false, fmt.Errorf("erro ao ler senha: %v", err)
	}

	return auth.Credentials{
		Username: username,
		Password: password,
	}, true, nil
}

func salvarCredenciais(credenciais auth.Credentials) error {
	configDir, err := obterDiretorioConfig()
	if err != nil {
		return err
	}

	prompt := promptui.Prompt{
		Label:     "üíæ Deseja salvar as credenciais? (Recomendado)",
		IsConfirm: true,
		Default:   "y",
	}

	resultado, err := prompt.Run()
	if err == promptui.ErrAbort || resultado != "y" && resultado != "Y" {
		fmt.Println("\n‚ö†Ô∏è  Credenciais n√£o ser√£o salvas. Voc√™ precisar√° inseri-las novamente na pr√≥xima execu√ß√£o.")
		return nil
	}

	envFile := filepath.Join(configDir, ".env")
	envContent := fmt.Sprintf("USERNAME_PONTO=%s\nPASSWORD_PONTO=%s\n", credenciais.Username, credenciais.Password)
	if err := os.WriteFile(envFile, []byte(envContent), 0600); err != nil {
		return fmt.Errorf("n√£o foi poss√≠vel salvar as credenciais: %v", err)
	}

	fmt.Println("\n‚úì Credenciais salvas com sucesso!")
	return nil
}

func configurarLimpeza(sessao auth.BrowserSession) {
	c := make(chan os.Signal, 1)
	signal.Notify(c, os.Interrupt, syscall.SIGTERM)
	go func() {
		<-c
		fmt.Print("\n\nüîÑ Encerrando programa...")
		sessao.Close()
		fmt.Println(" ‚úì")
		os.Exit(0)
	}()
}

func gerenciarLocalizacao(gerenciador *clockin.GerenciadorPonto) error {
	localizacaoAtual, err := gerenciador.ObterLocalizacaoAtual()
	if err != nil {
		return fmt.Errorf("erro obtendo localiza√ß√£o atual: %v", err)
	}

	fmt.Printf("\nüìç Localiza√ß√£o atual: %s\n", localizacaoAtual)

	prompt := promptui.Prompt{
		Label:     "Deseja alterar a localiza√ß√£o",
		IsConfirm: true,
	}

	resultado, err := prompt.Run()
	if err != nil {
		if err == promptui.ErrAbort {
			fmt.Printf("\n‚úì Mantendo localiza√ß√£o: %s\n", localizacaoAtual)
			return nil
		}
		return fmt.Errorf("erro na confirma√ß√£o: %v", err)
	}

	if resultado != "y" && resultado != "Y" {
		fmt.Printf("\n‚úì Mantendo localiza√ß√£o: %s\n", localizacaoAtual)
		return nil
	}

	fmt.Print("\nüîç Buscando localiza√ß√µes dispon√≠veis...")
	localizacoes, err := gerenciador.ObterLocalizacoesDisponiveis()
	if err != nil {
		fmt.Println(" ‚ùå")
		return fmt.Errorf("erro obtendo localiza√ß√µes: %v", err)
	}
	fmt.Println(" ‚úì")

	if len(localizacoes) == 0 {
		return fmt.Errorf("nenhuma localiza√ß√£o dispon√≠vel")
	}

	localizacaoSelecionada, err := ui.ExibirMenuLocalizacao(localizacoes)
	if err != nil {
		return fmt.Errorf("erro na sele√ß√£o de localiza√ß√£o: %v", err)
	}

	if localizacaoSelecionada.Nome == localizacaoAtual {
		fmt.Printf("\n‚úì Mantendo localiza√ß√£o: %s\n", localizacaoAtual)
		return nil
	}

	fmt.Printf("\nüîÑ Alterando localiza√ß√£o para: %s...", localizacaoSelecionada.Nome)
	if err := gerenciador.SelecionarLocalizacao(localizacaoSelecionada); err != nil {
		fmt.Println(" ‚ùå")
		return fmt.Errorf("erro ao selecionar localiza√ß√£o: %v", err)
	}
	fmt.Println(" ‚úì")

	return nil
}

func executarOperacaoPonto(gerenciador *clockin.GerenciadorPonto) error {
	// Sempre verifica e gerencia a localiza√ß√£o primeiro
	if err := gerenciarLocalizacao(gerenciador); err != nil {
		return err
	}

	fmt.Print("\nüîç Verificando opera√ß√µes dispon√≠veis...")
	operacoes, err := gerenciador.ObterOperacoesDisponiveis()
	if err != nil {
		fmt.Println(" ‚ùå")
		return fmt.Errorf("erro obtendo opera√ß√µes dispon√≠veis: %v", err)
	}
	fmt.Println(" ‚úì")

	if len(operacoes) == 0 {
		return fmt.Errorf("n√£o h√° opera√ß√µes dispon√≠veis no momento")
	}

	fmt.Println("\n‚ö° Opera√ß√µes dispon√≠veis:")
	for _, op := range operacoes {
		fmt.Printf("   ‚Ä¢ %s\n", op)
	}

	operacaoSelecionada, err := ui.ExibirMenuOperacao(operacoes)
	if err != nil {
		return fmt.Errorf("erro exibindo menu de opera√ß√µes: %v", err)
	}

	confirmado, err := ui.ExibirConfirmacao(operacaoSelecionada)
	if err != nil {
		return fmt.Errorf("erro exibindo confirma√ß√£o: %v", err)
	}

	if !confirmado {
		return fmt.Errorf("opera√ß√£o cancelada pelo usu√°rio")
	}

	fmt.Printf("\n‚è≥ Executando opera√ß√£o '%s'...", operacaoSelecionada)
	if err := gerenciador.ExecutarOperacao(operacaoSelecionada); err != nil {
		fmt.Println(" ‚ùå")
		return fmt.Errorf("erro executando opera√ß√£o: %v", err)
	}
	fmt.Println(" ‚úì")

	return nil
}

func main() {
	fmt.Println("\nüïí Batedor de Ponto - Oliveira Trust")
	fmt.Println("=====================================")

	fmt.Print("\n‚öôÔ∏è  Iniciando sistema...")
	sessao := auth.NewAuthSession()
	defer sessao.Close()
	configurarLimpeza(sessao)
	fmt.Println(" ‚úì")

	for {
		credenciais, novasCredenciais, err := carregarCredenciais()
		if err != nil {
			fmt.Printf("\n‚ùå Erro: %v\n", err)
			os.Exit(1)
		}

		fmt.Print("\nüîë Realizando login...")
		err = sessao.Login(credenciais)
		if err != nil {
			if _, ok := err.(*auth.LoginError); ok && err.Error() == "credenciais inv√°lidas" {
				fmt.Println(" ‚ùå")
				fmt.Println("\n‚ö†Ô∏è  Credenciais inv√°lidas. Por favor, tente novamente.")
				continue
			}
			fmt.Printf(" ‚ùå\n\n‚ùå Erro no login: %v\n", err)
			os.Exit(1)
		}
		fmt.Println(" ‚úì")

		if novasCredenciais {
			if err := salvarCredenciais(credenciais); err != nil {
				fmt.Printf("\n‚ö†Ô∏è  %v\n", err)
			}
		}

		break
	}

	gerenciador := clockin.NewGerenciadorPonto(sessao.GetContext())
	if err := executarOperacaoPonto(gerenciador); err != nil {
		fmt.Printf("\n‚ùå %v\n", err)
		os.Exit(1)
	}

	fmt.Println("\n‚ú® Opera√ß√£o conclu√≠da com sucesso!")
}
